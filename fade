#!/bin/bash
#
# Simulation Framework for Auditory Discrimination Experiments (FADE)
#
# Copyright (C) 2014-2018 Marc René Schädler

# Get the directory this script is stored in and its name
DIR=$(cd "$( dirname "$0" )" && pwd)
SCN=$(basename "$0")

# Set the program name
export PROGRAM="${SCN}"
if [[ "$PROGRAM" == *-config ]]; then
  export CONFIG=true
  PROGRAM=${PROGRAM%-config}
else
  export CONFIG=false
fi
# Set the version string
export VERSION='2.0.0'
# Set a detailed version description from git if possible
export GITVERSION=$((cd "$DIR" && git describe --always) 2> /dev/null)

# Add directory to path
PATH="${PATH}:${DIR}"

# Load configuration file
CGF="${DIR}/${PROGRAM}.cfg"
[ -f "${CGF}" ] && source "${CGF}"

# Load additional scripts from sub-script directory
SSD="${DIR}/${PROGRAM}.d"
[ -d "${SSD}" ] && PATH="${PATH}:${SSD}"

# Save the users current directory
export UCD="${PWD}"

# Load additional scripts
export PATH="${PATH}:${DIR}/scripts"

# Output the help text with a list of projects if no argument is given
if [ $# -lt 1 ]; then
  echo "usage"
  echo "  ${SCN} <PROJECT> <ACTION> [argument1] [argument2] ..."
  echo "version"
  echo "  ${VERSION} (${GITVERSION})"
  echo "PROJECTS (in the current directory)"
  ls -1 *"/.${PROGRAM}-"* 2>/dev/null | sort -n | sed "s/\.${PROGRAM}-//g" | \
    awk -F/ '{print $1 " (" $2 ")"}' | sort | column -t | \
    awk '{print "  " $0}' | sed 's/^[ ]*/  /g'
  echo "ACTIONS (for details see '${DIR}/README.md')"
  (ls -1a "${SSD}") | grep -v '[.~]' | sort | tr -s " " | while read line; do
    head "${SSD}/${line}" | grep '#USAGE' | sed -E 's/^[ ]*#USAGE[ ]*//g' | \
      sed -e 's/ /#/'
  done | column -s# -t | awk '{print "  " $0}'
  echo ""
  exit 1
fi

# The first argument is the worktitle
PROJECT="$1"
shift

# Create the project directory if it does not exist
# Add a file which encodes the version and creation time
# to identify projects easily
if [ ! -d "${PROJECT}" ]; then
  if ! mkdir -p "${PROJECT}" 2>/dev/null; then
    echo "could not create project in '${PROJECT}'"
    exit 1
  fi
  if ! date --iso-8601=seconds > "${PROJECT}/.${PROGRAM}-${VERSION}"; then
    echo "could not write to project '${PROJECT}'"
    exit 1
  fi
  echo "project created in '${PROJECT}'"
fi

PROJECT=$(cd "${PROJECT}" && echo "${PWD}")

# Get the version with which the project was created
export PROJECT_VERSION=$((cd "${PROJECT}" && ls -1 ".${PROGRAM}-"* 2>/dev/null) | \
  sort -n | tail -n1 | sed "s/^\.${PROGRAM}-//g")

# If no version could be determined it is no valid project
if [ -z "$PROJECT_VERSION" ]; then
  echo "The directory '${PROJECT}' does not contain a compatible project"
  exit 1
fi
  
# Enter the project
echo "=== ${PROGRAM}-${VERSION} (${GITVERSION}) project '${PROJECT}' ==="
cd "${PROJECT}" || exit 1

# Inform the user
echo "run '${SCN}' with arguments '$@'"

# Warn if the project was created with another version
if [ ! "${VERSION}" == "${PROJECT_VERSION}" ]; then
  echo "warning! this projects was created with a different version (${PROJECT_VERSION})"
fi

# Log this access
mkdir -p "${PROJECT}/log"
echo $(date --iso-8601=seconds)" ${VERSION} '${GITVERSION}' ${SCN} '${PROJECT}' ${@}" >> "log/access.log"

# Get the desired action
ACTION=$1
shift

# Info is the default action
[ -z "$ACTION" ] && ACTION=info

# Check if the corresponding script exists
ACS="${SSD}/${ACTION}"
if [ ! -f "${ACS}" ]; then
  echo "script '${ACS}' does not exist"
  exit 1
fi

# Run the script with the remaining arguments
STARTTIME=$(date +%s)
if ! ${ACS} "$@"; then
  echo "${ACTION} exited with error"
  exit 1
fi

# Print the elapsed time
STOPTIME=$(date +%s)
echo "=== completed in $[${STOPTIME}-${STARTTIME}] seconds ==="
echo ""

